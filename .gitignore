.env

// **გადაიტანეთ ლექციაში განხილული API თქვენთან(დამოუკიდებლად დაწერეთ თავიდან) და დაამატეთ შემდეგი ფუნცქიონალები:**
// 1. დაუმატეთ ახალი ველი ყველა პროდუქტს – სახელად stock(აღნიშნავს პროდუქტის რაოდენობას მაგ. { "stock": 10 }). შექმენით როუტი POST /buy/:id, რომელზე რექვესთის გაგზავნის შემდეგ მოცემული პროდუქტის stock 1-ით შემცირდება
// 2. წაშალეთ ყველა პროდუქტი – დაამატეთ ახალი როუტი DELETE /products/delete-all, რომელიც სრულად გაასუფთავებს პროდუქტების სიას.
// 3.დათვალეთ პროდუქტების რაოდენობა – დაამატეთ როუტი GET /products/count, რომელიც დააბრუნებს პროდუქტების საერთო რაოდენობას.
// 4.გადამოწმება მონაცემებზე – ახალი პროდუქტის დამატებისას name და price ველები სავალდებულო უნდა იყოს. თუ კლიენტმა request-ში ეს ველები არ მიუთითა გამოუტანეთ შემდეგი შეტყობინება: "name and price are required!"
// 5. აიცილეთ თავიდან დუბლიკატი პროდუქტები – სანამ ახალი პროდუქტი დაემატება, შეამოწმეთ, უკვე ხომ არ არსებობს პროდუქტი იგივე სახელით. თუ არსებობს გამოიტანეთ შემდეგი შეტყობინება: "Product already exists!"
// 6.იპოვეთ ყველაზე ძვირიანი პროდუქტი – დაამატეთ როუტი GET /products/most-expensive, რომელიც დააბრუნებს ყველაზე ძვირადღირებულ პროდუქტს.
// 7. დაამატეთ დროის ველი – როცა ახალი პროდუქტი ემატება, API-მ მიანიჭოს მას createdAt ველი მიმდინარე თარიღით.
// 8. ბოლო დამატებული პროდუქტი – დაამატეთ GET /products/latest, რომელიც დააბრუნებს ყველაზე ბოლოს დამატებულ პროდუქტს.
// 9(ბონუსი). პროდუქტების ფაილის სარეზერვო ასლი – სანამ products.json ფაილი განახლდება, მისი სარეზერვო ასლი შეინახეთ products_backup.json სახით.
